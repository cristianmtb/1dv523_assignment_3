{"version":3,"sources":["Notification.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Notification","props","time","Date","className","this","message","toUTCString","React","Component","App","socket","WebSocket","addEventListener","event","receive","state","notifs","issues","notification","active","msg","JSON","parse","data","type","setState","notifyUpdate","update","notifyComment","map","issue","key","id","title","href","url","author","body","comments","notif","action","addIssue","removeIssue","editIssue","aux","push","auhtor","index","findIndex","x","splice","temp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAEqBA,G,kBAGnB,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,KAAO,IAAIC,KAFE,E,sEAMlB,OACE,yBAAKC,UAAU,gBACZC,KAAKJ,MAAMK,QACZ,yBAAKF,UAAY,SACjB,yBAAKA,UAAY,cAAcC,KAAKH,KAAKK,oB,GAbPC,IAAMC,YCE3BC,E,YACnB,WAAaT,GAAQ,IAAD,8BAClB,4CAAMA,KAEDU,OAAS,IAAIC,UAAU,yBAE5B,EAAKD,OAAOE,iBAAiB,WAAW,SAACC,GAAD,OAAW,EAAKC,QAAQD,MAChE,EAAKE,MAAQ,CACXC,OAAQ,GACRC,OAAQ,GACRC,aAAc,CACZC,QAAQ,EACRd,QAAS,KAXK,E,qEAgBXQ,GACP,IAAMO,EAAMC,KAAKC,MAAMT,EAAMU,MACZ,YAAbH,EAAII,KACNpB,KAAKqB,SAAS,CACZR,OAAQG,EAAIG,OAEQ,WAAbH,EAAII,MACbpB,KAAKsB,aAAaN,EAAIG,MACtBnB,KAAKuB,OAAOP,EAAIG,OACM,YAAbH,EAAII,MACbpB,KAAKwB,cAAcR,EAAIG,Q,+BAKzB,OACE,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,aACb,uCAEEC,KAAKW,MAAME,OAAOY,KAAI,SAACC,GAAD,OACpB,yBACEC,IAAKD,EAAME,GACX7B,UAAU,SAEV,4BAAK2B,EAAMG,MAAX,KAAoBH,EAAME,IAC1B,uBAAGE,KAAMJ,EAAMK,KAAf,eACA,sCAAYL,EAAMM,QAClB,yBAAKjC,UAAU,SACf,yBAAKA,UAAU,aAAf,SACC2B,EAAMO,KACP,yBAAKlC,UAAU,SAVjB,uBAWuB2B,EAAMQ,cAKnC,yBAAKnC,UAAU,oBACb,8CAEEC,KAAKW,MAAMC,OAAOa,KAAI,SAACU,GAAD,OACpB,kBAAC,EAAD,CACER,IAAKQ,EACLlC,QAASkC,W,6BASfhB,GACN,OAAQA,EAAKiB,QACX,IAAK,SAGL,IAAK,WACHpC,KAAKqC,SAASlB,GACd,MACF,IAAK,SACHnB,KAAKsC,YAAYnB,GACjB,MACF,IAAK,SACHnB,KAAKuC,UAAUpB,M,+BAOXA,GACR,IAAMqB,EAAMxC,KAAKW,MAAME,OACvB2B,EAAIC,KAAK,CACPb,GAAIT,EAAKS,GACTC,MAAOV,EAAKU,MACZE,IAAKZ,EAAKY,IACVW,OAAQvB,EAAKuB,OACbT,KAAMd,EAAKc,KACXC,SAAUf,EAAKe,WAEjBlC,KAAKqB,SAAS,CACZR,OAAQ2B,M,kCAICrB,GACX,IAAMqB,EAAMxC,KAAKW,MAAME,OACjB8B,EAAQH,EAAII,WAAU,SAAAC,GAAC,OAAIA,EAAEjB,KAAOT,EAAKS,MAC/CY,EAAIM,OAAOH,EAAO,GAClB3C,KAAKqB,SAAS,CACZR,OAAQ2B,M,gCAIDrB,GACT,IAAMqB,EAAMxC,KAAKW,MAAME,OACjB8B,EAAQH,EAAII,WAAU,SAAAC,GAAC,OAAIA,EAAEjB,KAAOT,EAAKS,MAC/CY,EAAIG,GAAS,CACXf,GAAIT,EAAKS,GACTC,MAAOV,EAAKU,MACZE,IAAKZ,EAAKY,IACVW,OAAQvB,EAAKuB,OACbT,KAAMd,EAAKc,KACXC,SAAUf,EAAKe,UAEjBlC,KAAKqB,SAAS,CACZR,OAAQ2B,M,oCAIGrB,GACb,IAAMlB,EAAO,6BAAyBkB,EAAKiB,OAA9B,4BAAwDjB,EAAKO,OACpEc,EAAMxC,KAAKW,MAAMC,OACvB4B,EAAIC,KAAKxC,GACT,IAAM8C,EAAO/C,KAAKW,MAAME,OAClB8B,EAAQI,EAAKH,WAAU,SAAAC,GAAC,OAAIA,EAAEjB,KAAOT,EAAKO,SAC5B,YAAhBP,EAAKiB,OAAsBW,EAAKJ,GAAOT,WAClB,YAAhBf,EAAKiB,QAAsBW,EAAKJ,GAAOT,WAChDlC,KAAKqB,SAAS,CACZR,OAAQkC,EACRnC,OAAQ4B,M,mCAIErB,GACZ,IAAMlB,EAAO,uBAAmBkB,EAAKS,GAAxB,qBAAuCT,EAAKiB,QACnDW,EAAO/C,KAAKW,MAAMC,OACxBmC,EAAKN,KAAKxC,GACVD,KAAKqB,SAAS,CACZT,OAAQmC,Q,GAnJmB5C,IAAMC,WCQnB4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6967b5b2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class Notification extends React.Component {\r\n  time\r\n  //Standrad doesn't recognize the constructor\r\n  constructor (props) {\r\n    super(props)\r\n    this.time = new Date();\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='Notification'>\r\n        {this.props.message}\r\n        <div className = \"Line\"></div>\r\n        <div className = \"Notif-time\">{this.time.toUTCString()}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport Notification from './Notification'\n\nexport default class App extends React.Component {\n  constructor (props) {\n    super(props)\n    // For some reason standard JS doesn't recognize the websocket\n    this.socket = new WebSocket('ws:192.168.0.104:3000')\n\n    this.socket.addEventListener('message', (event) => this.receive(event))\n    this.state = {\n      notifs: [],\n      issues: [],\n      notification: {\n        active: false,\n        message: ''\n      }\n    }\n  }\n\n  receive (event) {\n    const msg = JSON.parse(event.data)\n    if (msg.type === 'initial') {\n      this.setState({\n        issues: msg.data\n      })\n    } else if (msg.type === 'update') {\n      this.notifyUpdate(msg.data)\n      this.update(msg.data)\n    } else if (msg.type === 'comment') {\n      this.notifyComment(msg.data)\n    }\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <div className='Issue-div'>\n          <h1>Issues:</h1>\n          {\n            this.state.issues.map((issue) => (\n              <div\n                key={issue.id}\n                className='Issue'\n              >\n                <h3>{issue.title} #{issue.id}</h3>\n                <a href={issue.url}>Go to Issue</a>\n                <p>Author: {issue.author}</p>\n                <div className='Line' />\n                <div className='BodyTitle'>Body:</div>\n                {issue.body}\n                <div className='Line' />\n                Number of comments: {issue.comments}\n              </div>\n            ))\n          }\n        </div>\n        <div className='Notification-Div'>\n          <h1>Notifications:</h1>\n          {\n            this.state.notifs.map((notif) => (\n              <Notification\n                key={notif}\n                message={notif}\n              />\n            ))\n          }\n        </div>\n      </div>\n    )\n  }\n\n  update (data) {\n    switch (data.action) {\n      case 'opened':\n        this.addIssue(data)\n        break\n      case 'reopened':\n        this.addIssue(data)\n        break\n      case 'closed':\n        this.removeIssue(data)\n        break\n      case 'edited':\n        this.editIssue(data)\n        break\n      default:\n        break\n    }\n  }\n\n  addIssue (data) {\n    const aux = this.state.issues\n    aux.push({\n      id: data.id,\n      title: data.title,\n      url: data.url,\n      auhtor: data.auhtor,\n      body: data.body,\n      comments: data.comments\n    })\n    this.setState({\n      issues: aux\n    })\n  }\n\n  removeIssue (data) {\n    const aux = this.state.issues\n    const index = aux.findIndex(x => x.id === data.id)\n    aux.splice(index, 1)\n    this.setState({\n      issues: aux\n    })\n  }\n\n  editIssue (data) {\n    const aux = this.state.issues\n    const index = aux.findIndex(x => x.id === data.id)\n    aux[index] = {\n      id: data.id,\n      title: data.title,\n      url: data.url,\n      auhtor: data.auhtor,\n      body: data.body,\n      comments: data.comments\n    }\n    this.setState({\n      issues: aux\n    })\n  }\n\n  notifyComment (data) {\n    const message = `A comment has been ${data.action} to issue number ${data.issue}`\n    const aux = this.state.notifs\n    aux.push(message)\n    const temp = this.state.issues\n    const index = temp.findIndex(x => x.id === data.issue)\n    if (data.action === 'deleted') temp[index].comments--\n    else if (data.action === 'created') temp[index].comments++\n    this.setState({\n      issues: temp,\n      notifs: aux\n    })\n  }\n\n  notifyUpdate (data) {\n    const message = `Issue number ${data.id} has been ${data.action}`\n    const temp = this.state.notifs\n    temp.push(message)\n    this.setState({\n      notifs: temp\n    })\n  }\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  // Standrad doesn't recognize fetch\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}